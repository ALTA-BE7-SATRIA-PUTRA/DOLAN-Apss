---
openapi: 3.0.0
info:
  title: Event Planning App
  description: "If you have any questions or requests please contact me at \n[telegram](https://t.me/satria_cening)\n"
  contact:
    email: satriacening@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/satriacening/project_group3/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://8.219.11.61:8080/
- url: https://petstore.swagger.io/v2
tags:
- name: Authentication
  description: operation to login
- name: User
  description: Operations about user
- name: Event
  description: operation about event
- name: Attendees
  description: operation about attendees
- name: Comment
  description: operation about comment
paths:
  /login:
    post:
      tags:
      - Authentication
      summary: Login user
      description: Used to access protected features
      operationId: loginUSer
      requestBody:
        description: For login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: false
      responses:
        "200":
          description: login success
  /users:
    post:
      tags:
      - User
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/{id}:
    get:
      tags:
      - User
      summary: Get user by user id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: Require id_user that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Succes to update user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUpdate'
        "400":
          description: Invalid id supplied
        "404":
          description: User not found
    delete:
      tags:
      - User
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The id that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: User not found
  /events:
    get:
      tags:
      - Event
      summary: operation for get all event
      responses:
        "200":
          description: get all events succes
    post:
      tags:
      - Event
      summary: operation for add event
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: false
      responses:
        "200":
          description: Create event succses
  /events/{id}:
    get:
      tags:
      - Event
      parameters:
      - name: id
        in: path
        description: required id event to get event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      responses:
        "200":
          description: get user by id succes
        "404":
          description: not found
    put:
      tags:
      - Event
      parameters:
      - name: id
        in: path
        description: required id to update event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: false
      responses:
        "200":
          description: succes to update event
        "404":
          description: event not found
    delete:
      tags:
      - Event
      parameters:
      - name: id
        in: path
        description: required id ti delete event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      responses:
        "200":
          description: succes to delete event
        "400":
          description: failed to delete event
  /attendees/{id}:
    get:
      tags:
      - Attendees
      summary: operation for get attendees by id event
      parameters:
      - name: id
        in: path
        description: required id_event for join to event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      responses:
        "200":
          description: succes get event
        "400":
          description: failed get event
    post:
      tags:
      - Attendees
      summary: operation for join attendees
      parameters:
      - name: id
        in: path
        description: required id_event for join to event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      responses:
        "200":
          description: succes join to event
        "400":
          description: failed join to event
  /comment/{id}:
    get:
      tags:
      - Comment
      summary: operation for get comment
      parameters:
      - name: id
        in: path
        description: required id event for get comment in the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      responses:
        "200":
          description: succes to get comment by event
        "400":
          description: failed to get comment by event
    post:
      tags:
      - Comment
      summary: operation for post comment
      parameters:
      - name: id
        in: path
        description: required id event for comment in the event
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: uint
          example: 1
      requestBody:
        content:
          aplication/json:
            schema:
              $ref: '#/components/schemas/comment'
      responses:
        "200":
          description: succses to post comment in the event
        "400":
          description: failed to post comment in the event
components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          example: satriaganteng@gmail.com
        password:
          type: string
          example: satria123
    User:
      type: object
      properties:
        name:
          type: string
          example: Satria Ganteng
        email:
          type: string
          example: satria@gmail.com
        password:
          type: string
          example: satria123
    SimpleUser:
      type: object
      properties:
        id:
          type: integer
          format: uint
          example: 1
        name:
          type: string
          example: Satria Ganteng
        email:
          type: string
          example: satria@mail.com
    Event:
      type: object
      properties:
        name:
          type: string
          example: Turnamen Mobile Legend :Bang-bang || tinggkat Desa Limbangan
        hosted_by:
          type: string
          example: Satria Ganteng
        date:
          type: string
          format: date-time
        location:
          type: string
          example: Limbangan
        detail:
          type: string
          example: ini adalah turnamen game online yang sangan di tunggu-tunggu
    ApiResponseUpdate:
      type: object
      properties:
        status:
          type: string
          example: succes
        message:
          type: string
          example: succes to update data
    comment:
      type: object
      properties:
        comment:
          type: string
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
